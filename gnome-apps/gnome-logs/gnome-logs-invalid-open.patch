From fdbb4ef40ae215b64bf3c7be879a6a590678defc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ball=C3=B3=20Gy=C3=B6rgy?= <ballogyor@gmail.com>
Date: Wed, 23 Apr 2025 09:15:13 +0200
Subject: [PATCH] Fix crash when invalid journal opened

It needs to be checked before processing it further.
---
 src/gl-application.c | 12 ++++++++++--
 src/gl-journal.c     | 35 ++++++++++++++++++++++++++---------
 2 files changed, 36 insertions(+), 11 deletions(-)

diff --git a/src/gl-application.c b/src/gl-application.c
index cef5320..20bf85e 100644
--- a/src/gl-application.c
+++ b/src/gl-application.c
@@ -261,7 +261,11 @@ gl_application_activate (GApplication *application)
 
     priv = gl_application_get_instance_private (GL_APPLICATION (application));
     priv->journal = gl_journal_new (NULL);
-    launch_window (application);
+
+    if (priv->journal)
+    {
+        launch_window (application);
+    }
 }
 
 static const GOptionEntry options[] =
@@ -308,7 +312,11 @@ gl_application_open (GApplication *application,
     g_ptr_array_add (array, NULL);
 
     priv->journal = gl_journal_new (array);
-    launch_window (application);
+
+    if (priv->journal)
+    {
+        launch_window (application);
+    }
 }
 
 static void
diff --git a/src/gl-journal.c b/src/gl-journal.c
index df1152f..e6192fe 100644
--- a/src/gl-journal.c
+++ b/src/gl-journal.c
@@ -379,19 +379,25 @@ gl_journal_finalize (GObject *object)
     GlJournal *journal = GL_JOURNAL (object);
     GlJournalPrivate *priv = gl_journal_get_instance_private (journal);
 
-    g_source_remove (priv->source_id);
+    if (priv->source_id)
+    {
+        g_source_remove (priv->source_id);
+    }
     g_clear_pointer (&priv->journal, sd_journal_close);
     g_clear_pointer (&priv->mandatory_fields, g_strfreev);
 
-    for (i = 0; i < priv->boot_ids->len; i++)
+    if (priv->boot_ids)
     {
-        GlJournalBootID *boot_id;
+        for (i = 0; i < priv->boot_ids->len; i++)
+        {
+            GlJournalBootID *boot_id;
 
-        boot_id = &g_array_index (priv->boot_ids, GlJournalBootID, i);
+            boot_id = &g_array_index (priv->boot_ids, GlJournalBootID, i);
 
-        g_free (boot_id->boot_match);
+            g_free (boot_id->boot_match);
+        }
+        g_array_free (priv->boot_ids, TRUE);
     }
-    g_array_free (priv->boot_ids, TRUE);
 
     G_OBJECT_CLASS (gl_journal_parent_class)->finalize (object);
 }
@@ -428,6 +434,8 @@ gl_journal_constructed (GObject *object)
     if (ret < 0)
     {
         g_critical ("Error opening systemd journal: %s", g_strerror (-ret));
+        priv->journal = NULL;
+        return;
     }
 
     ret = sd_journal_get_fd (journal);
@@ -813,9 +821,18 @@ gl_journal_previous (GlJournal *journal)
 GlJournal *
 gl_journal_new (GPtrArray *files)
 {
-    return g_object_new (GL_TYPE_JOURNAL,
-                         "files", files,
-                         NULL);
+    GlJournal *self = g_object_new (GL_TYPE_JOURNAL,
+                                    "files", files,
+                                    NULL);
+
+    GlJournalPrivate *priv = gl_journal_get_instance_private (self);
+
+    if (priv->journal == NULL) {
+        g_object_unref (self);
+        return NULL;
+    }
+
+    return self;
 }
 
 static void
-- 
GitLab


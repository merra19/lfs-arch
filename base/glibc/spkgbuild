# description	: GNU libc C library
# depends	: tzdata linux-api-headers

pkgname=glibc
pkgver=2.41
pkgrel=1
options="!lto staticlibs !strip"
source="https://ftp.gnu.org/gnu/glibc/glibc-$pkgver.tar.xz
        reenable_DT_HASH.patch lib32-glibc.conf
        locale.gen.txt locale-gen
        glibc-stable-branch.patch
        malloc_tune.patch tune_adaptive_spin.patch
        disable-vectorization-even-more.patch
        0001-Set-vector-width-and-alignment-to-fix-GCC-AVX-issue.patch"
backup="etc/gai.conf"
nodebug="usr/lib/gconv/.*\.so$"

build() {
    mkdir -p glibc-build lib32-glibc-build

    [ -d glibc-$pkgver ] && ln -s glibc-$pkgver glibc
    cd glibc


    # which relies on DT_HASH to be present in these libs.
    # reconsider 2023-01
    patch -Np1 -i "$srcdir"/reenable_DT_HASH.patch

    patch -Np1 -i ../glibc-stable-branch.patch
    patch -Np1 -i ../malloc_tune.patch
    patch -Np1 -i ../tune_adaptive_spin.patch
    patch -Np1 -i ../0001-Set-vector-width-and-alignment-to-fix-GCC-AVX-issue.patch
    patch -Np1 -i ../disable-vectorization-even-more.patch

    # Keep only the UTF-8 locales...
    supported=./localedata/SUPPORTED
    sed -nr '/^(#|SUPPORTED-LOCALES=|.*\/UTF-8)/p' $supported > $supported.new
    mv -v $supported.new $supported

    cd "$srcdir"/glibc-build

    echo 'int main(){}' > dummy.c
    
    if ( gcc -march=$MMARCH -dM -E  dummy.c   |  grep "__AVX2__" );then
        export ASFLAGS="-D__AVX__=1 -D__AVX2__=1 -msse2avx -D__FMA__=1 "
    fi

    export CFLAGS="-O3 -march=$MMARCH -mtune=generic -m64  -Wl,-z,max-page-size=0x1000 -fPIC -ffunction-sections -ffunction-sections "
    export ASFLAGS="-D__AVX__=1 -D__AVX2__=1 -msse2avx -D__FMA__=1 "
    unset LDFLAGS
    export LDFLAGS="-Wl,-z,max-page-size=0x1000 "

    echo "slibdir=/usr/lib" >> configparms
    echo "rtlddir=/usr/lib" >> configparms
    echo "sbindir=/usr/bin" >> configparms
    echo "rootsbindir=/usr/bin" >> configparms

    CC="gcc -m64 -ffile-prefix-map=/tools=/usr" \
    "$srcdir"/glibc/configure \
        --prefix=/usr \
        --libdir=/usr/lib \
        --libexecdir=/usr/lib \
        --with-headers=/usr/include \
        --disable-werror \
        --enable-bind-now \
		--enable-fortify-source \
        --enable-cet \
        --enable-kernel=4.19 \
        --enable-stack-protector=strong \
        --disable-nscd \
        --disable-systemtap \
        --disable-profile \
        --enable-multi-arch \
        --build=x86_64-pc-linux-gnu \
        --host=x86_64-pc-linux-gnu
    make -O

    unset ASFLAGS
    export CFLAGS="-O3 -m32 -march=$MMARCH -mtune=generic -mstackrealign -Wl,-z,max-page-size=0x1000 "
    unset LDFLAGS
    export LDFLAGS="-Wl,-z,max-page-size=0x1000 "

    cd "$srcdir"/lib32-glibc-build

    echo "slibdir=/usr/lib32" >> configparms
    echo "rtlddir=/usr/lib32" >> configparms
    echo "sbindir=/usr/bin" >> configparms
    echo "rootsbindir=/usr/bin" >> configparms

    CC="gcc -ffile-prefix-map=/tools=/usr -m32 -mstackrealign" \
    CXX="g++ -ffile-prefix-map=/tools=/usr -m32 -mstackrealign" \
    "$srcdir"/glibc/configure \
        --prefix=/usr \
        --libdir=/usr/lib32 \
        --libexecdir=/usr/lib32 \
        --with-headers=/usr/include \
        --disable-werror \
        --enable-bind-now \
		--enable-fortify-source \
        --enable-kernel=4.19 \
        --enable-stack-protector=strong \
        --disable-nscd \
        --disable-systemtap \
        --disable-profile \
        --enable-multi-arch \
        --build=i686-pc-linux-gnu \
        --host=i686-pc-linux-gnu  \
        --target=i686-pc-linux-gnu  \
        --disable-cet \
        libc_cv_can_use_register_asm_ebp=no
    make -O

    # pregenerate locales here instead of in package
    # functions because localedef does not like fakeroot
    make -C "${srcdir}"/glibc/localedata objdir="${srcdir}"/glibc-build \
        DESTDIR="${srcdir}"/locales install-locale-files

    unset LDFLAGS
    unset CFLAGS
} 

package() {
    # lib32
    pushd lib32-glibc-build

    make DESTDIR="${pkgdir}" install
    rm -rf "${pkgdir}"/{etc,sbin,usr/{bin,sbin,share},var}

    # We need to keep 32 bit specific header files
    find "${pkgdir}"/usr/include -type f -not -name '*-32.h' -delete

    # Dynamic linker
    install -d "${pkgdir}"/usr/lib
    ln -s ../lib32/ld-linux.so.2 "${pkgdir}"/usr/lib/

    # Add lib32 paths to the default library search path
    install -Dm644 "${srcdir}"/lib32-glibc.conf "${pkgdir}"/etc/ld.so.conf.d/lib32-glibc.conf

    # Symlink /usr/lib32/locale to /usr/lib/locale
    ln -s ../lib/locale "${pkgdir}"/usr/lib32/locale

    # we don't want/need debug symbols for locale .so files, they cause binary delta thrash 
    strip "${pkgdir}"/usr/lib32/gconv/*.so
    strip --remove-section=".note.gnu.build-id" "${pkgdir}"/usr/lib32/gconv/*.so
    popd

    make -C glibc-build DESTDIR="${pkgdir}" install
    rm -f "${pkgdir}"/etc/ld.so.cache

    # Shipped in tzdata
    rm -f "${pkgdir}"/usr/bin/{tzselect,zdump,zic}

    cd glibc

    install -dm755 "${pkgdir}"/usr/lib/locale

    install -m644 posix/gai.conf "${pkgdir}"/etc/gai.conf

    install -dm755 "${pkgdir}"/etc/ld.so.conf.d

    install -m755 "${srcdir}"/locale-gen "${pkgdir}"/usr/bin

    # Create /etc/locale.gen
    install -m644 "${srcdir}"/locale.gen.txt "${pkgdir}"/etc/locale.gen
    sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' \
        localedata/SUPPORTED >> "${pkgdir}"/etc/locale.gen

    # Add SUPPORTED file to pkg
    sed -e '1,3d' -e 's|/| |g' -e 's| \\||g' \
        localedata/SUPPORTED > "${pkgdir}"/usr/share/i18n/SUPPORTED

    # install C.UTF-8 so that it is always available
    # should be built into glibc eventually
    # https://sourceware.org/glibc/wiki/Proposals/C.UTF-8
    # https://bugs.archlinux.org/task/74864
    install -dm755 "${pkgdir}"/usr/lib/locale
    cp -r "${srcdir}"/locales/usr/lib/locale/C.utf8 -t "${pkgdir}"/usr/lib/locale
    sed -i '/#C\.UTF-8 /d' "${pkgdir}"/etc/locale.gen

    # we don't want/need debug symbols for locale .so files, they cause binary delta thrash 
    strip "${pkgdir}"/usr/lib/gconv/*.so
    strip --remove-section=".note.gnu.build-id" "${pkgdir}"/usr/lib/gconv/*.so



    # locales
    cd "$srcdir"
    cp -r locales/* -t "${pkgdir}"

    # deduplicate locale data
    hardlink -c "${pkgdir}"/usr/lib/locale
}

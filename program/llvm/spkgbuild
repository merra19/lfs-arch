# description	: Low Level Virtual Machine
# depends	: ninja libffi python3 zlib ncurses zstd perl binutils
# depends	: cmake

pkgname=llvm
pkgver=20.1.1
_pkgver=20.1.1
pkgrel=1
options="staticlibs !lto !asneeded"
source="https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver/llvm-$pkgver.src.tar.xz
        https://anduin.linuxfromscratch.org/BLFS/llvm/llvm-cmake-${_pkgver}.src.tar.xz
        https://anduin.linuxfromscratch.org/BLFS/llvm/llvm-third-party-${_pkgver}.src.tar.xz
        https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver/clang-$pkgver.src.tar.xz
        https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver/compiler-rt-$pkgver.src.tar.xz
        clang-0003-Add-f-instructions-that-GCC-has-that-Clang-must-igno.patch prefix.patch"
noextract="llvm-cmake-${_pkgver}.src.tar.xz llvm-third-party-${_pkgver}.src.tar.xz clang-$pkgver.src.tar.xz compiler-rt-$pkgver.src.tar.xz"

build() {
    cd llvm-$pkgver.src

    CFLAGS="-O2 -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x4000 -march=$MMARCH"
    CXXFLAGS=$CFLAGS
    FFLAGS="-O2 -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wno-error -Wl,-z,max-page-size=0x4000 -march=$MMARCH"
    FCFLAGS=$FFLAGS
    CFLAGS="$CFLAGS -fno-lto "
    FCFLAGS="$FFLAGS -fno-lto "
    FFLAGS="$FFLAGS -fno-lto "
    CXXFLAGS="$CXXFLAGS -fno-lto "

    tar -xf ../llvm-cmake-${_pkgver}.src.tar.xz
    tar -xf ../llvm-third-party-${_pkgver}.src.tar.xz 
    sed "/LLVM_COMMON_CMAKE_UTILS/s@../cmake@cmake-${_pkgver}.src@" -i CMakeLists.txt 
    sed "/LLVM_THIRD_PARTY_DIR/s@../third-party@third-party-${_pkgver}.src@" \
        -i cmake/modules/HandleLLVMOptions.cmake

    tar -xf ../clang-$pkgver.src.tar.xz -C tools &&
    mv tools/clang-$pkgver.src tools/clang

    tar -xf ../compiler-rt-$pkgver.src.tar.xz -C projects    &&
    mv projects/compiler-rt-$pkgver.src projects/compiler-rt &&

    # Fix python 
    grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'

    sed 's/utility/tool/' -i utils/FileCheck/CMakeLists.txt

    patch -Np1 -d tools/clang -i "$srcdir"/clang-0003-Add-f-instructions-that-GCC-has-that-Clang-must-igno.patch
    patch -Np1 -i ../prefix.patch

    CC="gcc" CXX="g++" \
    cmake -B build \
        -D CMAKE_INSTALL_PREFIX=/usr \
        -D CMAKE_SKIP_INSTALL_RPATH=ON \
        -D LLVM_ENABLE_FFI=ON \
        -D CMAKE_BUILD_TYPE=Release \
        -D LLVM_BUILD_LLVM_DYLIB=ON \
        -D LLVM_LINK_LLVM_DYLIB=ON \
        -D LLVM_ENABLE_RTTI=ON \
        -D LLVM_TARGETS_TO_BUILD="X86;host;AMDGPU" \
        -D LLVM_BINUTILS_INCDIR=/usr/include \
        -D LLVM_INCLUDE_BENCHMARKS=OFF \
        -D CLANG_DEFAULT_PIE_ON_LINUX=ON \
        -D CLANG_CONFIG_FILE_SYSTEM_DIR=/etc/clang \
        -Wno-dev -G Ninja
    ninja -C build
}

_python_optimize() {
  python -m compileall "$@"
  python -O -m compileall "$@"
  python -OO -m compileall "$@"
}

package() {
    cd llvm-$pkgver.src/build

    DESTDIR="$pkgdir" ninja install 

    # Include lit for running lit-based tests in other projects
    pushd ../utils/lit
    python3 setup.py install --root="$pkgdir" -O1
    popd

    # Remove documentation sources
    rm -rf "$pkgdir"/usr/share/doc/llvm/html/{_sources,.buildinfo}

    # Move scanbuild-py into site-packages and install Python bindings
    local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
    install -d "$pkgdir/$site_packages"
    mv "$pkgdir"/usr/lib/{libear,libscanbuild} "$pkgdir/$site_packages/"
    cp -a ../tools/clang/bindings/python/clang "$pkgdir/$site_packages/"

    # Move analyzer scripts out of /usr/libexec
    mv "$pkgdir"/usr/libexec/* "$pkgdir/usr/lib/clang/"
    rmdir "$pkgdir/usr/libexec"
    sed -i 's|libexec|lib/clang|' \
        "$pkgdir/usr/bin/scan-build" \
        "$pkgdir/$site_packages/libscanbuild/analyze.py"

    # Compile Python scripts
    _python_optimize "$pkgdir/usr/share" "$pkgdir/$site_packages"

    # Symlink LLVMgold.so from /usr/lib/bfd-plugins
    # https://bugs.archlinux.org/task/28479
    install -d "$pkgdir/usr/lib/bfd-plugins"
    ln -s ../LLVMgold.so "$pkgdir/usr/lib/bfd-plugins/LLVMgold.so"

    mkdir -pv "$pkgdir"/etc/clang
    for i in clang clang++; do
        echo -fstack-protector-strong > "$pkgdir"/etc/clang/$i.cfg
    done
}

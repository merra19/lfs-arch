# description	: Systems programming language from Mozilla
# depends	: cmake curl llvm lib32-llvm xz zlib openssl lld libssh2
# depends	: glibc gcc

pkgname=rustc
pkgver=1.87.0
pkgver2=1.86.0
daterust=2025-04-03
pkgrel=1
options="!strip !emptydirs !lto"
source="https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.xz
        https://static.rust-lang.org/dist/${daterust}/rust-std-${pkgver2}-x86_64-unknown-linux-gnu.tar.xz
        https://static.rust-lang.org/dist/${daterust}/rustc-${pkgver2}-x86_64-unknown-linux-gnu.tar.xz
        https://static.rust-lang.org/dist/${daterust}/cargo-${pkgver2}-x86_64-unknown-linux-gnu.tar.xz
        0001-bootstrap-Change-libexec-dir.patch
        0002-bootstrap-Change-bash-completion-dir.patch
        0003-bootstrap-Use-lld-mode-only-for-host-linked-targets.patch
        0004-compiler-Change-LLVM-targets.patch
        config.toml"
noextract="rust-std-${pkgver2}-x86_64-unknown-linux-gnu.tar.xz rustc-${pkgver2}-x86_64-unknown-linux-gnu.tar.xz cargo-${pkgver2}-x86_64-unknown-linux-gnu.tar.xz"
#optsflags=" -O3 -ffat-lto-objects -flto=auto "
optsflags=" -O3"

# Make sure the duplication in rust-wasm is found
COMPRESSZST+=(--long)

prepare() {
    cd rustc-$pkgver-src

    # Patch bootstrap so that rust-analyzer-proc-macro-srv
    # is in /usr/lib instead of /usr/libexec
    patch -Np1 -i ../0001-bootstrap-Change-libexec-dir.patch

    # Put bash completions where they belong
    patch -Np1 -i ../0002-bootstrap-Change-bash-completion-dir.patch

    # Unbreak wasm targets
    patch -Np1 -i ../0003-bootstrap-Use-lld-mode-only-for-host-linked-targets.patch

    # Use our *-pc-linux-gnu targets, making LTO with clang simpler
    patch -Np1 -i ../0004-compiler-Change-LLVM-targets.patch

	mkdir -p build/cache/${daterust}
	mv ../rust-std-${pkgver2}-x86_64-unknown-linux-gnu.tar.xz build/cache/${daterust}
	mv ../rustc-${pkgver2}-x86_64-unknown-linux-gnu.tar.xz build/cache/${daterust}
	mv ../cargo-${pkgver2}-x86_64-unknown-linux-gnu.tar.xz build/cache/${daterust}

    cp ../config.toml ./

    # add change-id & version to config.toml
    sed 's/YYYY/138986/' -i config.toml
    sed "s/XXXX/$pkgver/g" -i config.toml
}

_pick() {
    local p="$1" f d; shift
    for f; do
        d="$srcdir/$p/${f#$pkgdir/}"
        mkdir -p "$(dirname "$d")"
        mv "$f" "$d"
        rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
    done
}

build() {
	cd rustc-$pkgver-src

    export RUST_BACKTRACE=1
    #unset CFLAGS CXXFLAGS LDFLAGS

    export AR=gcc-ar
    export RANLIB=gcc-ranlib
    export NM=gcc-nm

    # remove compiler options not supported by the wasi targets
    local sanitize_flags=(
        -r
        -e 's/-m64 ?//'
    )
    CFLAGS="$(<<<"$CFLAGS" sed "${sanitize_flags[@]}")"
    CXXFLAGS="$(<<<"$CXXFLAGS" sed "${sanitize_flags[@]}")"

	[ ! -e /usr/include/libssh2.h ] || export LIBSSH2_SYS_USE_PKG_CONFIG=1; 
    [ ! -e /usr/include/sqlite3.h ] || export LIBSQLITE3_SYS_USE_PKG_CONFIG=1

    DESTDIR="$srcdir/dest-rust" python ./x.py install -j "$(nproc)"
    
    cd ../dest-rust

    # delete unnecessary files, e.g. files only used for the uninstall script
    rm -v usr/lib/rustlib/{components,install.log,rust-installer-version,uninstall.sh}
    rm -v usr/lib/rustlib/manifest-*

    # rustbuild always installs copies of the shared libraries to /usr/lib,
    # overwrite them with symlinks to the per-architecture versions
    mkdir -pv usr/lib32
    ln -srvft usr/lib   usr/lib/rustlib/x86_64-unknown-linux-gnu/lib/*.so
    ln -srvft usr/lib32 usr/lib/rustlib/i686-unknown-linux-gnu/lib/*.so

    _pick dest-i686 usr/lib/rustlib/i686-unknown-linux-gnu usr/lib32
    #_pick dest-musl usr/lib/rustlib/x86_64-unknown-linux-musl
    #_pick dest-aarch64-gnu usr/lib/rustlib/aarch64-unknown-linux-gnu
    #_pick dest-aarch64-musl usr/lib/rustlib/aarch64-unknown-linux-musl
    #_pick dest-wasm usr/lib/rustlib/wasm32-*
    #_pick dest-src  usr/lib/rustlib/src
}

package() {
    cp -a dest-rust/* "$pkgdir"
    cp -a dest-i686/* "$pkgdir"
}